{"version":3,"file":"Radios-3ebc561f.js","sources":["../../src/layout/Legend/Legend.tsx","../../src/components/Input/Input.tsx","../../src/components/RadioItem/RadioItem.tsx","../../src/components/Radios/Radios.tsx"],"sourcesContent":["import React from \"react\";\nimport LegendProps from \"./Legend.types\";\n\nexport const Legend = ({\n  children,\n  classes,\n  isPageHeading,\n  ...attributes\n}: LegendProps) => {\n  if (isPageHeading) {\n    return (\n      <legend\n        className={`govuk-fieldset__legend${classes ? ` ${classes}` : ''}`}\n        { ...attributes }\n      >\n        <h1 className=\"govuk-fieldset__heading\">{ children }</h1>\n      </legend>\n    );\n  } else {\n    return (\n      <legend\n        className={`govuk-fieldset__legend${classes ? ` ${classes}` : ''}`}\n        { ...attributes }\n      >\n        { children }\n      </legend>\n    );\n  }\n};\n\nexport default Legend;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport InputProps from \"./Input.types\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport Hint from \"../Hint\";\nimport Label from \"../Label\";\n\nexport const Input = ({\n  id,\n  name,\n  errorMessage,\n  classes,\n  type,\n  value,\n  describedBy,\n  autocomplete,\n  inputmode,\n  prefix,\n  suffix,\n  children,\n  ...attributes\n}: InputProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  let describedByValue = describedBy || '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = id ? `${id}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n\n  const PrefixSuffixWrapper = ({children}: any) => {\n    if (prefix || suffix) {\n      return (\n        <>\n          <div className=\"govuk-input__wrapper\">\n            { prefix && (\n              <div className=\"govuk-input__prefix\">\n                {prefix}\n              </div>\n            )}\n            {children}\n            { suffix && (\n              <div className=\"govuk-input__suffix\">\n                {suffix}\n              </div>\n            )}\n          </div>\n        </>\n      )\n    }\n    else return children;\n  };\n\n  return (\n    <>\n      <FormGroup error={errorMessage}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Label)) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {\n                    htmlFor: id\n                  })\n                }\n              </>\n            );\n          }\n          if (isValidElement(child) && (child.type === Hint)) {\n            describedByValue += ` ${id}-hint`;\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, { id: `${id}-hint` })\n                }\n              </>\n            );\n          }\n        })}\n        {errorMessageComponent}\n        <PrefixSuffixWrapper>\n          <input\n            className={`govuk-input ${classes || ''} ${errorMessage ? ' govuk-input--error' : ''}`}\n            id={id}\n            name={name}\n            type={type}\n            defaultValue={value}\n            aria-describedby={describedByValue || ''}\n            autoComplete={autocomplete}\n            inputMode={inputmode}\n            {...attributes}\n          />\n        </PrefixSuffixWrapper>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default Input;\n","import React, { Children, cloneElement, isValidElement } from \"react\";\nimport Label from '../Label';\nimport Hint from '../Hint';\nimport RadioItemProps from \"./RadioItem.types\";\n\nexport const RadioItem = ({\n  id,\n  name,\n  children,\n  key,\n  divider,\n  value,\n  data,\n  conditional,\n  classes,\n  ...attributes }: RadioItemProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  const conditionalId = `conditional-${id}`\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <div className={ !divider ? 'govuk-radios__item' : 'govuk-radios__divider' }>\n      { !divider && (\n        <>\n          <input\n            className={`govuk-radios__input ${classes || ''}`}\n            id={id}\n            name={name}\n            key={key}\n            type=\"radio\"\n            value={value}\n            defaultChecked={data === value}\n            data-aria-controls={ conditional ? conditionalId : '' }\n            { ...attributes }\n          />\n          { Children.map(arrayChildren, (child:any, index) => {\n            if (isValidElement(child) && child.type === Label) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-radios__label',\n                      htmlFor: id\n                    })\n                  }\n                </>\n              );\n            } else if (isValidElement(child) && child.type === Hint) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-radios__hint'\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n          { conditional && (\n            <div className={`govuk-radios__conditional ${data !== value ? 'govuk-radios__conditional--hidden' : ''}`} id={conditionalId}>\n              { conditional }\n            </div>\n          )}\n        </>\n      )}\n      { divider && (\n        <>\n          { children }\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RadioItem;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport RadiosProps from \"./Radios.types\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport Fieldset from \"../../layout/Fieldset\";\nimport Hint from \"../Hint\";\nimport Legend from \"../../layout/Legend\";\nimport RadioItem from \"../RadioItem\";\n\nexport const Radios = ({\n  idPrefix,\n  name,\n  children,\n  classes,\n  value,\n  errorMessage,\n  ...attributes\n}: RadiosProps) => {\n\n  if (!idPrefix && name) {\n    idPrefix = name;\n  } else if (!name && idPrefix) {\n    name = idPrefix;\n  }\n\n  let describedByValue = '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = idPrefix ? `${idPrefix}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n  const radioItemsArray: any = arrayChildren.filter((child: any) => child.type === RadioItem);\n\n  { Children.map(arrayChildren, (child:any, _index) => {\n    if (isValidElement(child) && (child.type === Hint)) {\n      describedByValue += ` ${idPrefix}-hint`;\n    }\n  })}\n\n  return (\n    <FormGroup error={errorMessage}>\n      <Fieldset describedBy={describedByValue}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Legend)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Hint)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        { errorMessageComponent }\n        <div className={`govuk-radios ${classes || ''}`} data-module=\"govuk-radios\" { ...attributes }>\n          { Children.map(radioItemsArray, (child: any, index) => {\n            if (isValidElement(child) && (child.type === RadioItem)) {\n              const radioItemId = child?.props?.id ? child?.props?.id : idPrefix;\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      id: index > 0 ? `${radioItemId}-${index}` : radioItemId,\n                      data: value,\n                      name: name\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n        </div>\n      </Fieldset>\n    </FormGroup>\n  );\n};\n\nexport default Radios;\n"],"names":["Legend","children","classes","isPageHeading","attributes","jsx","Input","id","name","errorMessage","type","value","describedBy","autocomplete","inputmode","prefix","suffix","describedByValue","errorMessageComponent","errorId","ErrorMessage","arrayChildren","Children","PrefixSuffixWrapper","children2","Fragment","jsxs","FormGroup","child","_index","isValidElement","Label","cloneElement","Hint","RadioItem","key","divider","data","conditional","conditionalId","index","Radios","idPrefix","radioItemsArray","Fieldset","radioItemId","_a","_b"],"mappings":"+SAGO,MAAAA,EAAA,CAAA,CAAgB,SAAAC,EACrB,QAAAC,EACA,cAAAC,EACA,GAAAC,CAEF,IACED,EACEE,EACE,SAAC,CAAA,UAAA,yBAAAH,EAAA,IAAAA,IAAA,KAC+D,GAAAE,EACzD,SAAAC,EAAA,KAAA,CAAA,UAAA,0BAAA,SAAAJ,EAAA,CAE+C,CAAA,EAIxDI,EACE,SAAC,CAAA,UAAA,yBAAAH,EAAA,IAAAA,IAAA,KAC+D,GAAAE,EACzD,SAAAH,CAEH,CAAA,kYCjBH,MAAAK,EAAA,CAAA,CAAe,GAAAC,EACpB,KAAAC,EACA,aAAAC,EACA,QAAAP,EACA,KAAAQ,EACA,MAAAC,EACA,YAAAC,EACA,aAAAC,EACA,UAAAC,EACA,OAAAC,EACA,OAAAC,EACA,SAAAf,EACA,GAAAG,CAEF,IAAA,CAEE,CAAAG,GAAAC,EACED,EAAAC,EAAK,CAAAA,GAAAD,IAELC,EAAAD,GAGF,IAAAU,EAAAL,GAAA,GACAM,EAEA,GAAAT,EAAA,CACE,MAAAU,EAAAZ,EAAA,GAAAA,UAAA,GACAU,GAAA,IAAAE,IACAD,EAAAb,EAAAe,EAAA,CAAA,GAAAD,EAAA,SAAAV,CAAA,CAAA,EAGF,MAAAY,EAAAC,EAAAA,SAAA,QAAArB,CAAA,EAEAsB,EAAA,CAAA,CAAA,SAAAC,CAAA,IACET,GAAAC,EACEX,EAAAoB,EAAA,CAAA,SAAAC,EAAA,MAAA,CAAA,UAAA,uBAAA,SAAA,CAGQX,GAAAV,EAAA,MAAA,CAAA,UAAA,sBAAA,SAAAU,EAAA,EAGAS,EAEDR,GAAAX,EAAA,MAAA,CAAA,UAAA,sBAAA,SAAAW,EAAA,CAIC,CAAA,CAAA,CAAA,CAAA,EAMLQ,EAGP,OAAAnB,EAAAoB,EAAA,CAAA,SAAAC,EAAAC,EAAA,CAAA,MAAAlB,EAAA,SAAA,CAGQa,EAAAA,SAAA,IAAAD,EAAA,CAAAO,EAAAC,IAAA,CACA,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAG,EACE,OAAA1B,EAAAoB,EAAA,CAAA,SAAAO,EAAAA,aAAAJ,EAAA,CAGqD,QAAArB,CACpC,CAAA,CAAA,CAAA,EAMnB,GAAAuB,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAK,EACE,OAAAhB,GAAA,IAAAV,SACAF,EAAAoB,EAAA,CAAA,SAAAO,EAAA,aAAAJ,EAAA,CAAA,GAAA,GAAArB,QAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EACDW,EACAb,EAAAkB,EAAA,CAAA,SAAAlB,EAEC,QAAC,CAAA,UAAA,eAAAH,GAAA,MAAAO,EAAA,sBAAA,KACmF,GAAAF,EAClF,KAAAC,EACA,KAAAE,EACA,aAAAC,EACc,mBAAAM,GAAA,GACwB,aAAAJ,EACxB,UAAAC,EACH,GAAAV,CACP,CAAA,EAAA,CAER,CAAA,CAAA,CAAA,CAAA,CAIR,2lDCrGO,MAAA8B,EAAA,CAAA,CAAmB,GAAA3B,EACxB,KAAAC,EACA,SAAAP,EACA,IAAAkC,EACA,QAAAC,EACA,MAAAzB,EACA,KAAA0B,EACA,YAAAC,EACA,QAAApC,EACA,GAAAE,CACc,IAAA,CAEd,CAAAG,GAAAC,EACED,EAAAC,EAAK,CAAAA,GAAAD,IAELC,EAAAD,GAGF,MAAAgC,EAAA,eAAAhC,IAEAc,EAAAC,EAAAA,SAAA,QAAArB,CAAA,EAEA,OAAAyB,EAAA,MAAA,CAAA,UAAAU,EAAA,wBAAA,qBAAA,SAAA,CAEM,CAAAA,GAAAV,EAAAD,EAAA,CAAA,SAAA,CAEEpB,EAAA,QAAC,CAAA,UAAA,uBAAAH,GAAA,KAC8C,GAAAK,EAC7C,KAAAC,EACA,KAAA,QAEK,MAAAG,EACL,eAAA0B,IAAA1B,EACyB,qBAAA2B,EAAAC,EAAA,GAC0B,GAAAnC,CAC9C,EAAA+B,CALA,EAMPb,EAAAA,SAAA,IAAAD,EAAA,CAAAO,EAAAY,IAAA,CAEE,GAAAV,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAG,EACE,OAAA1B,EAAAoB,EAAA,CAAA,SAAAO,EAAAA,aAAAJ,EAAA,CAGqD,QAAA,sBACpC,QAAArB,CACA,CAAA,CAAA,CAAA,EAGf,GAAAuB,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAK,EAGF,OAAA5B,EAAAoB,EAAA,CAAA,SAAAO,EAAAA,aAAAJ,EAAA,CAGqD,QAAA,oBACpC,CAAA,CAAA,CAAA,CAKnB,CAAA,EACDU,GAAAjC,EAAA,MAAA,CAAA,UAAA,6BAAAgC,IAAA1B,EAAA,oCAAA,KAAA,GAAA4B,EAAA,SAAAD,EAAA,CAIC,EAAA,EAEJF,GAAA/B,EAAAoB,EAAA,CAAA,SAAAxB,CAAA,CAAA,CAKA,CAAA,CAAA,CAIR,83BCvEO,MAAAwC,EAAA,CAAA,CAAgB,SAAAC,EACrB,KAAAlC,EACA,SAAAP,EACA,QAAAC,EACA,MAAAS,EACA,aAAAF,EACA,GAAAL,CAEF,IAAA,CAEE,CAAAsC,GAAAlC,EACEkC,EAAAlC,EAAW,CAAAA,GAAAkC,IAEXlC,EAAAkC,GAGF,IAAAzB,EAAA,GACAC,EAEA,GAAAT,EAAA,CACE,MAAAU,EAAAuB,EAAA,GAAAA,UAAA,GACAzB,GAAA,IAAAE,IACAD,EAAAb,EAAAe,EAAA,CAAA,GAAAD,EAAA,SAAAV,CAAA,CAAA,EAGF,MAAAY,EAAAC,EAAAA,SAAA,QAAArB,CAAA,EACA0C,EAAAtB,EAAA,OAAAO,GAAAA,EAAA,OAAAM,CAAA,EAEEZ,OAAAA,EAAAA,SAAA,IAAAD,EAAA,CAAAO,EAAAC,IAAA,CACAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAK,IACEhB,GAAA,IAAAyB,SACF,CAAA,EAGFrC,EAAAsB,EAAA,CAAA,MAAAlB,EAAA,SAAAiB,EAAAkB,EAAA,CAAA,YAAA3B,EAAA,SAAA,CAGQK,EAAAA,SAAA,IAAAD,EAAA,CAAAO,EAAAC,IAAA,CACA,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAA5B,EACE,OAAAK,EAAAoB,EAAA,CAAA,SAAAO,EAAA,aAAAJ,EAAA,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EACDN,EAAAA,SAAA,IAAAD,EAAA,CAAAO,EAAAC,IAAA,CAEC,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAK,EACE,OAAA5B,EAAAoB,EAAA,CAAA,SAAAO,EAAA,aAAAJ,EAAA,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EACDV,EACCb,EAAA,MAAA,CAAA,UAAA,gBAAAH,GAAA,KAAA,cAAA,eAAA,GAAAE,EAAA,SAAAkB,EAAA,SAAA,IAAAqB,EAAA,CAAAf,EAAAY,IAAA,SAGE,GAAAV,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAM,EAAA,CACE,MAAAW,GAAAC,EAAAlB,GAAA,YAAAA,EAAA,QAAA,MAAAkB,EAAA,IAAAC,EAAAnB,GAAA,YAAAA,EAAA,QAAA,YAAAmB,EAAA,GAAAL,EACA,OAAArC,EAAAoB,EAAA,CAAA,SAAAO,EAAAA,aAAAJ,EAAA,CAGqD,GAAAY,EAAA,EAAA,GAAAK,KAAAL,IAAAK,EACD,KAAAlC,EACtC,KAAAH,CACN,CAAA,CAAA,CAAA,EAKV,CAAA,EAAA,CAEJ,CAAA,CAAA,CAAA,CAAA,CAIR"}