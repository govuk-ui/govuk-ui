{"version":3,"file":"CharacterCount-e524db91.js","sources":["../../src/components/CheckboxItem/CheckboxItem.tsx","../../src/components/Checkboxes/Checkboxes.tsx","../../src/components/DateInput/DateInput.tsx","../../src/components/SummaryListItem/SummaryListItem.tsx","../../src/components/SummaryListRow/SummaryListRow.tsx","../../src/components/SummaryList/SummaryList.tsx","../../src/components/SummaryListKey/SummaryListKey.tsx","../../src/components/SummaryListValue/SummaryListValue.tsx","../../src/components/SummaryListActions/SummaryListActions.tsx","../../src/components/TableCell/TableCell.tsx","../../src/components/TableHeader/TableHeader.tsx","../../src/components/TableRow/TableRow.tsx","../../src/components/Table/Table.tsx","../../src/components/CharacterCount/CharacterCount.tsx"],"sourcesContent":["import React, { Children, cloneElement, isValidElement } from \"react\";\nimport Label from '../Label';\nimport Hint from '../Hint';\nimport CheckboxItemProps from \"./CheckboxItem.types\";\n\nexport const CheckboxItem = ({\n  id,\n  name,\n  children,\n  key,\n  divider,\n  exclusive,\n  conditional,\n  value,\n  data,\n  classes,\n  ...attributes }: CheckboxItemProps) => {\n\n  const conditionalId = `conditional-${id}`\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <div className={ !divider ? 'govuk-checkboxes__item' : 'govuk-checkboxes__divider' }>\n      { !divider && (\n        <>\n          <input\n            className={`govuk-checkboxes__input ${classes || ''}`}\n            id={id}\n            name={name}\n            key={key}\n            type=\"checkbox\"\n            value={value}\n            defaultChecked={((Array.isArray(data) && data.includes(value)) || (data === value))}\n            data-aria-controls={ conditional ? conditionalId : '' }\n            data-behaviour={exclusive ? 'exclusive' : null}\n            { ...attributes }\n          />\n          { Children.map(arrayChildren, (child:any, index) => {\n            if (isValidElement(child) && child.type === Label) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-checkboxes__label'\n                    })\n                  }\n                </>\n              );\n            } else if (isValidElement(child) && child.type === Hint) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-checkboxes__hint'\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n          { conditional && (\n            <div className={`govuk-checkboxes__conditional ${data !== value ? 'govuk-checkboxes__conditional--hidden' : ''}`} id={conditionalId}>\n              { conditional }\n            </div>\n          )}\n        </>\n      )}\n      { divider && (\n        <>\n          { children }\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CheckboxItem;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport CheckboxesProps from \"./Checkboxes.types\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport Legend from \"../../layout/Legend\";\nimport Fieldset from \"../../layout/Fieldset\";\nimport CheckboxItem from \"../CheckboxItem\";\nimport Hint from \"../Hint\";\n\nexport const Checkboxes = ({\n  idPrefix,\n  name,\n  children,\n  classes,\n  errorMessage,\n  value,\n  ...attributes\n}: CheckboxesProps) => {\n\n  if (!idPrefix && name) {\n    idPrefix = name;\n  } else if (!name && idPrefix) {\n    name = idPrefix;\n  }\n\n  let describedByValue = '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = idPrefix ? `${idPrefix}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n  const checkboxItemsArray: any = arrayChildren.filter((child: any) => child.type === CheckboxItem);\n\n  { Children.map(arrayChildren, (child:any, _index) => {\n    if (isValidElement(child) && (child.type === Hint)) {\n      describedByValue += ` ${idPrefix}-hint`;\n    }\n  })}\n\n  return (\n    <FormGroup error={errorMessage}>\n      <Fieldset describedBy={describedByValue}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Legend)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Hint)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        { errorMessageComponent }\n        <div className={`govuk-checkboxes ${classes || ''}`} data-module=\"govuk-checkboxes\" { ...attributes }>\n          { Children.map(checkboxItemsArray, (child: any, index) => {\n            if (isValidElement(child) && (child.type === CheckboxItem)) {\n              const checkboxItemId = child?.props?.id ? child?.props?.id : idPrefix;\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      id: index > 0 ? `${checkboxItemId}-${index}` : checkboxItemId,\n                      data: value,\n                      name: name\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n        </div>\n      </Fieldset>\n    </FormGroup>\n  );\n};\n\nexport default Checkboxes;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport DateInputProps from \"./DateInput.types\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport Input from \"../Input\";\nimport Label from \"../Label\";\nimport Fieldset from \"../../layout/Fieldset\";\nimport Legend from \"../../layout/Legend\";\nimport Hint from \"../Hint\";\nimport Typography from \"../../typography/Typography\";\n\nexport const DateInput = ({\n  id,\n  name,\n  classes,\n  dayLabel,\n  monthLabel,\n  yearLabel,\n  autocompleteDay,\n  autocompleteMonth,\n  autocompleteYear,\n  errorMessage,\n  errorDay,\n  errorMonth,\n  errorYear,\n  children,\n  value,\n  ...attributes\n}: DateInputProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  let errorMessageComponent;\n  let describedByValue = '';\n\n  if (errorMessage) {\n    const errorId = id ? `${id}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n\n    if (!errorDay && !errorMonth && !errorYear) {\n      errorDay = true;\n      errorMonth = true;\n      errorYear = true;\n    }\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n\n  { Children.map(arrayChildren, (child:any, _index) => {\n    if (isValidElement(child) && (child.type === Hint)) {\n      describedByValue += ` ${id}-hint`;\n    }\n  })}\n\n  return (\n    <FormGroup error={errorMessage}>\n      <Fieldset role=\"group\" describedBy={describedByValue}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && ((child.type === Legend) || (child.type === Hint))) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        { errorMessageComponent }\n        <div className={`govuk-date-input ${classes || ''}`} id={id} {...attributes}>\n          <div className=\"govuk-date-input__item\">\n            <Input\n              classes={`govuk-input govuk-date-input__input govuk-input--width-2${errorDay ? ' govuk-input--error' : ''}`}\n              id={`${id}-day`}\n              name={`${name}-day`}\n              type=\"text\"\n              inputmode=\"numeric\"\n              autocomplete={autocompleteDay || ''}\n              value={value ? value[`${id}-day`] : null}\n            >\n              <Label>\n                {dayLabel || 'Day'}\n              </Label>\n            </Input>\n          </div>\n\n          <div className=\"govuk-date-input__item\">\n            <Input\n              classes={`govuk-input govuk-date-input__input govuk-input--width-2${errorMonth ? ' govuk-input--error' : ''}`}\n              id={`${id}-month`}\n              name={`${name}-month`}\n              type=\"text\"\n              inputmode=\"numeric\"\n              autocomplete={autocompleteMonth || ''}\n              value={value ? value[`${id}-month`] : null}\n            >\n              <Label>\n                {monthLabel || 'Month'}\n              </Label>\n            </Input>\n          </div>\n\n          <div className=\"govuk-date-input__item\">\n            <Input\n              classes={`govuk-input govuk-date-input__input govuk-input--width-4${errorYear ? ' govuk-input--error' : ''}`}\n              id={`${id}-year`}\n              name={`${name}-year`}\n              type=\"text\"\n              inputmode=\"numeric\"\n              autocomplete={autocompleteYear || ''}\n              value={value ? value[`${id}-year`] : null}\n            >\n              <Label>\n                {yearLabel || 'Year'}\n              </Label>\n            </Input>\n          </div>\n        </div>\n      </Fieldset>\n    </FormGroup>\n  );\n};\n\nexport default DateInput;\n","import React, { Children, cloneElement, isValidElement } from \"react\";\nimport { SummaryListActions, SummaryListKey, SummaryListValue } from \"..\";\nimport SummaryListItemProps from \"./SummaryListItem.types\";\n\nexport const SummaryListItem = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListItemProps) => {\n\nconst arrayChildren: any = Children.toArray(children);\n\n  return (\n    <div className={`govuk-summary-list__row ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      { Children.map(arrayChildren, (child:any, index) => {\n        if (isValidElement(child) && (\n          child.type === SummaryListKey ||\n          child.type === SummaryListValue ||\n          child.type === SummaryListActions)\n        ) {\n          return (\n            <>\n              { \n                cloneElement(child as React.ReactElement<any>, {})\n              }\n            </>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\nexport default SummaryListItem;\n","import React from \"react\";\nimport { SummaryListActions, SummaryListItem, SummaryListKey, SummaryListValue } from \"..\";\nimport SummaryListRowProps from \"./SummaryListRow.types\";\n\nexport const SummaryListRow = ({ \n  id,\n  classes,\n  children,\n  field,\n  data,\n  rowKey,\n  href,\n  ...attributes\n}: SummaryListRowProps) => {\n\n  if (!field || ! data) {\n    return null;\n  }\n\n  if (!Object.keys(data).includes(field)) {\n    return null;\n  }\n\n  return (\n    <SummaryListItem classes={classes} id={id} { ...attributes }>\n      <SummaryListKey>\n        { rowKey ? rowKey : field}\n      </SummaryListKey>\n      <SummaryListValue>\n        { data[field] }\n      </SummaryListValue>\n      <SummaryListActions>\n        <a className=\"govuk-link\" href={href}>\n          Change <span className=\"govuk-visually-hidden\">\n            { field.toLowerCase() }\n          </span>\n        </a>\n      </SummaryListActions>\n    </SummaryListItem>\n  );\n};\n\nexport default SummaryListRow;\n\n","import React, { Children, cloneElement, isValidElement } from \"react\";\nimport SummaryListItem from \"../SummaryListItem\";\nimport SummaryListRow from \"../SummaryListRow\";\nimport SummaryListProps from \"./SummaryList.types\";\n\nexport const SummaryList = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListProps) => {\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <dl \n      className={`govuk-summary-list ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      { Children.map(arrayChildren, (child:any, index) => {\n        if (isValidElement(child) && (child.type === SummaryListItem || child.type === SummaryListRow)) {\n          return (\n            <>\n              { \n                cloneElement(child as React.ReactElement<any>, {})\n              }\n            </>\n          );\n        }\n      })}\n    </dl>\n  );\n};\n\nexport default SummaryList;\n","import React from \"react\";\nimport SummaryListKeyProps from \"./SummaryListKey.types\";\n\nexport const SummaryListKey = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListKeyProps) => {\n  return (\n    <dt className={`govuk-summary-list__key ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      {children}\n    </dt>\n  );\n};\n\nexport default SummaryListKey;\n","import React from \"react\";\nimport SummaryListValueProps from \"./SummaryListValue.types\";\n\nexport const SummaryListValue = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListValueProps) => {\n  return (\n    <dt className={`govuk-summary-list__value ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      {children}\n    </dt>\n  );\n};\n\nexport default SummaryListValue;\n\n","import React from \"react\";\nimport SummaryListActionsProps from \"./SummaryListActions.types\";\n\nexport const SummaryListActions = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListActionsProps) => {\n  return (\n    <dt className={`govuk-summary-list__actions ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      {children}\n    </dt>\n  );\n};\n\nexport default SummaryListActions;\n","import React from \"react\";\nimport TableCellProps from \"./TableCell.types\";\n\nexport const TableCell = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableCellProps) => {\n  \n  return (\n    <>\n      <td className={`govuk-table__cell ${classes || ''}`} id={id} { ...attributes }>\n        { children }\n      </td>\n    </>\n  );\n};\n\nexport default TableCell;\n\n\n\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableHeaderProps from \"./TableHeader.types\";\nimport TableCell from \"../TableCell\";\n\nexport const TableHeader = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableHeaderProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <thead className={`govuk-table__head ${classes || ''}`} id={id} { ...attributes }>\n        <tr className=\"govuk-table__row\">\n          { Children.map(arrayChildren, (child:any, _index) => {\n            if (isValidElement(child) && (child.type === TableCell)) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n              );\n            }\n          })}\n        </tr>\n      </thead>\n    </>\n  );\n};\n\nexport default TableHeader;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableRowProps from \"./TableRow.types\";\nimport TableCell from \"../TableCell/TableCell\";\n\nexport const TableRow = ({\n  id,\n  children,\n  caption ,\n  classes,\n  attributes,\n }: TableRowProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <tr className={`govuk-table__row ${classes || ''}`} id={id} { ...attributes }>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === TableCell)) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {})\n                }\n              </>\n            );\n          }\n        })}\n      </tr>\n    </>\n  );\n};\n\nexport default TableRow;","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableProps from \"./Table.types\";\nimport TableHeader from \"../TableHeader/TableHeader\";\nimport TableRow from \"../TableRow/TableRow\";\n\nexport const Table = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <table className={`govuk-table ${classes || ''}`} id={id} { ...attributes }>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === TableHeader)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        <tbody className=\"govuk-table__body\">\n          { Children.map(arrayChildren, (child:any, _index) => {\n            if (isValidElement(child) && (child.type === TableRow)) {\n              return (\n                  <>\n                    {\n                      cloneElement(child as React.ReactElement<any>, {})\n                    }\n                  </>\n              );\n            }\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport CharacterCountProps from \"./CharacterCount.types\";\nimport { Textarea } from \"..\";\n\nexport const CharacterCount = ({\n  name,\n  id,\n  maxLength,\n  textareaDescriptionText,\n  value,\n  errorMessage,\n  rows,\n  autocomplete,\n  children,\n  maxWords,\n  threshold,\n  charactersUnderLimitText,\n  charactersAtLimitText,\n  charactersOverLimitText,\n  wordsUnderLimitText,\n  wordsAtLimitText,\n  wordsOverLimitText,\n  classes,\n  formGroup,\n  countMessage,\n  spellcheck,\n  describedBy,\n  ...attributes\n}: CharacterCountProps) => {\n\n  const hintSuffix = maxWords ? `${maxWords} words` : `${maxLength} characters`;\n  const hintMessage = `You can enter up to ${hintSuffix}`;\n  return (\n    <div\n      className={`govuk-character-count${classes ? ` ${classes}` : ''}`}\n      data-module=\"govuk-character-count\"\n      data-maxlength={`${maxLength || ''}`}\n      data-maxwords={`${maxWords || ''}`}\n      data-threshold={`${threshold || ''}`}\n    >\n      <Textarea\n        classes=\"govuk-textarea govuk-js-character-count\"\n        id={id}\n        name={name}\n        rows={rows}\n        autocomplete={autocomplete}\n        spellcheck={spellcheck}\n        describedBy={describedBy || ''}\n        value={value || ''}\n        errorMessage={errorMessage || ''}\n        {...attributes}\n      >\n        {children}\n      </Textarea>\n      \n      <div id={`${id}-info`} className=\"govuk-hint govuk-character-count__message\">\n        {hintMessage}\n      </div>\n    </div>\n  );\n};\n\nexport default CharacterCount;\n"],"names":["CheckboxItem","id","name","children","key","divider","exclusive","conditional","value","data","classes","attributes","conditionalId","arrayChildren","Children","jsxs","Fragment","jsx","child","index","isValidElement","Label","cloneElement","Hint","Checkboxes","idPrefix","errorMessage","describedByValue","errorMessageComponent","errorId","ErrorMessage","checkboxItemsArray","_index","FormGroup","Fieldset","Legend","checkboxItemId","_a","_b","DateInput","dayLabel","monthLabel","yearLabel","autocompleteDay","autocompleteMonth","autocompleteYear","errorDay","errorMonth","errorYear","Input","SummaryListItem","SummaryListKey","SummaryListValue","SummaryListActions","SummaryListRow","field","rowKey","href","SummaryList","TableCell","TableHeader","TableRow","caption","Table","CharacterCount","maxLength","textareaDescriptionText","rows","autocomplete","maxWords","threshold","charactersUnderLimitText","charactersAtLimitText","charactersOverLimitText","wordsUnderLimitText","wordsAtLimitText","wordsOverLimitText","formGroup","countMessage","spellcheck","describedBy","hintMessage","Textarea"],"mappings":"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"}