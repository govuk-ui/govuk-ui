{"version":3,"file":"Radios-6fbe53a5.js","sources":["../../src/components/ErrorMessage/ErrorMessage.tsx","../../src/layout/Legend/Legend.tsx","../../src/components/Label/Label.tsx","../../src/components/Hint/Hint.tsx","../../src/components/Input/Input.tsx","../../src/components/RadioItem/RadioItem.tsx","../../src/components/Radios/Radios.tsx"],"sourcesContent":["import React from \"react\";\nimport ErrorMessageProps from \"./ErrorMessage.types\";\n\nexport const ErrorMessage = ({\n  children,\n  visuallyHiddenText,\n  id,\n  classes,\n  attributes\n}: ErrorMessageProps) => {\n  const visuallyHiddenTextComponent = (\n    <span className=\"govuk-visually-hidden\">{visuallyHiddenText ? visuallyHiddenText : 'Error: '}: </span>\n  );\n\n  return (\n    <p className={`govuk-error-message ${classes || ''}`} id={id} {...attributes}>\n      {visuallyHiddenTextComponent}\n      {children}\n    </p>\n  );\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport LegendProps from \"./Legend.types\";\n\nexport const Legend = ({\n  children,\n  classes,\n  isPageHeading,\n  ...attributes\n}: LegendProps) => {\n  if (isPageHeading) {\n    return (\n      <legend\n        className={`govuk-fieldset__legend${classes ? ` ${classes}` : ''}`}\n        { ...attributes }\n      >\n        <h1 className=\"govuk-fieldset__heading\">{ children }</h1>\n      </legend>\n    );\n  } else {\n    return (\n      <legend\n        className={`govuk-fieldset__legend${classes ? ` ${classes}` : ''}`}\n        { ...attributes }\n      >\n        { children }\n      </legend>\n    );\n  }\n};\n\nexport default Legend;\n","import React from \"react\";\nimport LabelProps from \"./Label.types\";\n\nexport const Label = ({ children, id, classes, htmlFor, attributes }: LabelProps) => {\n  return (\n    <label className={`govuk-label ${classes || ''}`} htmlFor={htmlFor} id={id} { ...attributes }>\n      { children }\n    </label>\n  );\n};\n\nexport default Label;\n","import React from \"react\";\nimport HintProps from \"./Hint.types\";\n\nexport const Hint = ({ children, id, classes, ...attributes }: HintProps) => {\n  return (\n    <div className={`govuk-hint ${classes || ''}`} id={id} { ...attributes }>\n      { children }\n    </div>\n  );\n};\n\nexport default Hint;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport InputProps from \"./Input.types\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport Hint from \"../Hint\";\nimport Label from \"../Label\";\n\nexport const Input = ({\n  id,\n  name,\n  errorMessage,\n  classes,\n  type,\n  value,\n  describedBy,\n  autocomplete,\n  inputmode,\n  prefix,\n  suffix,\n  children,\n  ...attributes\n}: InputProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  let describedByValue = describedBy || '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = id ? `${id}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n\n  const PrefixSuffixWrapper = ({children}: any) => {\n    if (prefix || suffix) {\n      return (\n        <>\n          <div className=\"govuk-input__wrapper\">\n            { prefix && (\n              <div className=\"govuk-input__prefix\">\n                {prefix}\n              </div>\n            )}\n            {children}\n            { suffix && (\n              <div className=\"govuk-input__suffix\">\n                {suffix}\n              </div>\n            )}\n          </div>\n        </>\n      )\n    }\n    else return children;\n  };\n\n  return (\n    <>\n      <FormGroup error={errorMessage}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Label)) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {\n                    htmlFor: id\n                  })\n                }\n              </>\n            );\n          }\n          if (isValidElement(child) && (child.type === Hint)) {\n            describedByValue += ` ${id}-hint`;\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, { id: `${id}-hint` })\n                }\n              </>\n            );\n          }\n        })}\n        {errorMessageComponent}\n        <PrefixSuffixWrapper>\n          <input\n            className={`govuk-input ${classes || ''} ${errorMessage ? ' govuk-input--error' : ''}`}\n            id={id}\n            name={name}\n            type={type}\n            defaultValue={value}\n            aria-describedby={describedByValue || ''}\n            autoComplete={autocomplete}\n            inputMode={inputmode}\n            {...attributes}\n          />\n        </PrefixSuffixWrapper>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default Input;\n","import React, { Children, cloneElement, isValidElement } from \"react\";\nimport Label from '../Label';\nimport Hint from '../Hint';\nimport RadioItemProps from \"./RadioItem.types\";\n\nexport const RadioItem = ({\n  id,\n  name,\n  children,\n  key,\n  divider,\n  value,\n  checked,\n  conditional,\n  classes,\n  ...attributes }: RadioItemProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  const conditionalId = `conditional-${id}`\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <div className={ !divider ? 'govuk-radios__item' : 'govuk-radios__divider' }>\n      { !divider && (\n        <>\n          <input\n            className={`govuk-radios__input ${classes || ''}`}\n            id={id}\n            name={name}\n            key={key}\n            type=\"radio\"\n            value={value}\n            defaultChecked={checked}\n            data-aria-controls={ conditional ? conditionalId : '' }\n            { ...attributes }\n          />\n          { Children.map(arrayChildren, (child:any, _index) => {\n            if (isValidElement(child) && child.type === Label) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-radios__label',\n                      htmlFor: id\n                    })\n                  }\n                </>\n              );\n            } else if (isValidElement(child) && child.type === Hint) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-radios__hint'\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n          { conditional && (\n            <div className={`govuk-radios__conditional${!checked ? ' govuk-radios__conditional--hidden' : ''}`} id={conditionalId}>\n              { conditional }\n            </div>\n          )}\n        </>\n      )}\n      { divider && (\n        <>\n          { children }\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RadioItem;\n","import React, {Children, cloneElement, isValidElement, PropsWithChildren, ReactElement} from \"react\";\nimport RadiosProps from \"./Radios.types\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport Fieldset from \"../../layout/Fieldset\";\nimport Hint from \"../Hint\";\nimport Legend from \"../../layout/Legend\";\nimport RadioItem from \"../RadioItem\";\nimport RadioItemProps from \"../RadioItem/RadioItem.types\";\n\nexport const Radios = ({\n  idPrefix,\n  name,\n  children,\n  classes,\n  value,\n  errorMessage,\n  ...attributes\n}: RadiosProps) => {\n\n  if (!idPrefix && name) {\n    idPrefix = name;\n  } else if (!name && idPrefix) {\n    name = idPrefix;\n  }\n\n  let describedByValue = '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = idPrefix ? `${idPrefix}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n  const radioItemsArray: any = arrayChildren.filter((child: any) => child.type === RadioItem);\n\n  { Children.map(arrayChildren, (child:any, _index) => {\n    if (isValidElement(child) && (child.type === Hint)) {\n      describedByValue += ` ${idPrefix}-hint`;\n    }\n  })}\n\n  return (\n    <FormGroup error={errorMessage}>\n      <Fieldset describedBy={describedByValue}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && ((child.type === Legend) || (child.type === Hint))) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {})\n                }\n              </>\n            );\n          }\n        })}\n        { errorMessageComponent }\n        <div className={`govuk-radios ${classes || ''}`} data-module=\"govuk-radios\" { ...attributes }>\n          { Children.map(radioItemsArray, (child: any, index) => {\n            if (isValidElement(child) && (child.type === RadioItem)) {\n              const radioItemId = child?.props?.id ? child?.props?.id : idPrefix;\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      id: index > 0 ? `${radioItemId}-${index}` : radioItemId,\n                      checked: child.props.value === value,\n                      name: name\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n        </div>\n      </Fieldset>\n    </FormGroup>\n  );\n};\n\nexport default Radios;\n"],"names":["ErrorMessage","children","visuallyHiddenText","id","classes","attributes","visuallyHiddenTextComponent","jsxs","Legend","isPageHeading","jsx","Label","htmlFor","Hint","Input","name","errorMessage","type","value","describedBy","autocomplete","inputmode","prefix","suffix","describedByValue","errorMessageComponent","errorId","arrayChildren","Children","PrefixSuffixWrapper","children2","Fragment","FormGroup","child","_index","isValidElement","cloneElement","RadioItem","key","divider","checked","conditional","conditionalId","Radios","idPrefix","radioItemsArray","Fieldset","index","radioItemId","_a","_b"],"mappings":"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"}