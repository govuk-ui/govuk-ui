{"version":3,"file":"Input-70154cc0.js","sources":["../../src/components/Input/Input.tsx"],"sourcesContent":["import React, {Children, cloneElement, isValidElement} from \"react\";\nimport InputProps from \"./Input.types\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport Hint from \"../Hint\";\nimport Label from \"../Label\";\n\nexport const Input = ({\n  id,\n  name,\n  errorMessage,\n  classes,\n  type,\n  value,\n  describedBy,\n  autocomplete,\n  inputmode,\n  attributes,\n  children,\n}: InputProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  let describedByValue = describedBy || '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = id ? `${id}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <FormGroup error={errorMessage}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Label)) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {\n                    htmlFor: id\n                  })\n                }\n              </>\n            );\n          }\n          if (isValidElement(child) && (child.type === Hint)) {\n            describedByValue += ` ${id}-hint`;\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, { id: `${id}-hint` })\n                }\n              </>\n            );\n          }\n        })}\n        {errorMessageComponent}\n        <input\n          className={`govuk-input ${classes || ''} ${errorMessage ? ' govuk-input--error' : ''}`}\n          id={id}\n          name={name}\n          type={type}\n          defaultValue={value}\n          aria-describedby={describedByValue || ''}\n          autoComplete={autocomplete}\n          inputMode={inputmode}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nexport default Input;\n"],"names":["Input","id","name","errorMessage","classes","type","value","describedBy","autocomplete","inputmode","attributes","children","describedByValue","errorMessageComponent","errorId","jsx","ErrorMessage","arrayChildren","Children","Fragment","jsxs","FormGroup","child","_index","isValidElement","Label","cloneElement","Hint"],"mappings":"yQAOO,MAAAA,EAAA,CAAA,CAAe,GAAAC,EACpB,KAAAC,EACA,aAAAC,EACA,QAAAC,EACA,KAAAC,EACA,MAAAC,EACA,YAAAC,EACA,aAAAC,EACA,UAAAC,EACA,WAAAC,EACA,SAAAC,CAEF,IAAA,CAEE,CAAAV,GAAAC,EACED,EAAAC,EAAK,CAAAA,GAAAD,IAELC,EAAAD,GAGF,IAAAW,EAAAL,GAAA,GACAM,EAEA,GAAAV,EAAA,CACE,MAAAW,EAAAb,EAAA,GAAAA,UAAA,GACAW,GAAA,IAAAE,IACAD,EAAAE,EAAAC,EAAA,CAAA,GAAAF,EAAA,SAAAX,CAAA,CAAA,CAAiE,CAGnE,MAAAc,EAAAC,EAAAA,SAAA,QAAAP,CAAA,EAEA,OAAAI,EAAAI,EAAA,CAAA,SAAAC,EAAAC,EAAA,CAAA,MAAAlB,EAAA,SAAA,CAGQe,EAAAA,SAAA,IAAAD,EAAA,CAAAK,EAAAC,IAAA,CACA,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAG,EACE,OAAAV,EAAAI,EAAA,CAAA,SAAAO,EAAAA,aAAAJ,EAAA,CAGqD,QAAArB,CACpC,CAAA,CAAA,CAAA,EAMnB,GAAAuB,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAK,EACE,OAAAf,GAAA,IAAAX,SACAc,EAAAI,EAAA,CAAA,SAAAO,EAAA,aAAAJ,EAAA,CAAA,GAAA,GAAArB,QAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EACDY,EACAE,EACD,QAAC,CAAA,UAAA,eAAAX,GAAA,MAAAD,EAAA,sBAAA,KACmF,GAAAF,EAClF,KAAAC,EACA,KAAAG,EACA,aAAAC,EACc,mBAAAM,GAAA,GACwB,aAAAJ,EACxB,UAAAC,CACH,CAAA,CACb,CAAA,CAAA,CAAA,CAAA,CAIR"}