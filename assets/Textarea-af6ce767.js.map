{"version":3,"file":"Textarea-af6ce767.js","sources":["../../src/components/Textarea/Textarea.tsx"],"sourcesContent":["import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TextareaProps from \"./Textarea.types\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport Hint from \"../Hint\";\nimport Label from \"../Label\";\n\nexport const Textarea = ({\n  name,\n  id,\n  rows,\n  autocomplete,\n  spellcheck,\n  classes,\n  errorMessage,\n  attributes,\n  children,\n  describedBy,\n  value,\n}: TextareaProps) => {\n  let describedByValue = describedBy || '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = id ? `${id}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <FormGroup error={errorMessage}>\n      { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Label)) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {\n                    htmlFor: id\n                  })\n                }\n              </>\n            );\n          }\n          if (isValidElement(child) && (child.type === Hint)) {\n            describedByValue += ` ${id}-hint`;\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, { id: `${id}-hint` })\n                }\n              </>\n            );\n          }\n        })}\n        {errorMessageComponent}\n        <textarea\n          className={`govuk-textarea ${classes}`}\n          id={id}\n          name={name}\n          rows={rows}\n          autoComplete={autocomplete}\n          spellCheck={spellcheck}\n          aria-describedby={describedByValue || ''}\n          defaultValue={value}\n          {...attributes}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nexport default Textarea;\n"],"names":["Textarea","name","id","rows","autocomplete","spellcheck","classes","errorMessage","attributes","children","describedBy","value","describedByValue","errorMessageComponent","errorId","jsx","ErrorMessage","arrayChildren","Children","Fragment","jsxs","FormGroup","child","_index","isValidElement","Label","cloneElement","Hint"],"mappings":"8QAOO,MAAAA,EAAA,CAAA,CAAkB,KAAAC,EACvB,GAAAC,EACA,KAAAC,EACA,aAAAC,EACA,WAAAC,EACA,QAAAC,EACA,aAAAC,EACA,WAAAC,EACA,SAAAC,EACA,YAAAC,EACA,MAAAC,CAEF,IAAA,CACE,IAAAC,EAAAF,GAAA,GACAG,EAEA,GAAAN,EAAA,CACE,MAAAO,EAAAZ,EAAA,GAAAA,UAAA,GACAU,GAAA,IAAAE,IACAD,EAAAE,EAAAC,EAAA,CAAA,GAAAF,EAAA,SAAAP,CAAA,CAAA,CAAiE,CAGnE,MAAAU,EAAAC,EAAAA,SAAA,QAAAT,CAAA,EAEA,OAAAM,EAAAI,EAAA,CAAA,SAAAC,EAAAC,EAAA,CAAA,MAAAd,EAAA,SAAA,CAGMW,EAAAA,SAAA,IAAAD,EAAA,CAAAK,EAAAC,IAAA,CACE,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAG,EACE,OAAAV,EAAAI,EAAA,CAAA,SAAAO,EAAAA,aAAAJ,EAAA,CAGqD,QAAApB,CACpC,CAAA,CAAA,CAAA,EAMnB,GAAAsB,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAK,EACE,OAAAf,GAAA,IAAAV,SACAa,EAAAI,EAAA,CAAA,SAAAO,EAAA,aAAAJ,EAAA,CAAA,GAAA,GAAApB,QAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EACDW,EACAE,EACD,WAAC,CAAA,UAAA,kBAAAT,IAC8B,GAAAJ,EAC7B,KAAAD,EACA,KAAAE,EACA,aAAAC,EACc,WAAAC,EACF,mBAAAO,GAAA,GAC0B,aAAAD,EACxB,GAAAH,CACV,CAAA,CACN,CAAA,CAAA,CAAA,CAAA,CAIR"}