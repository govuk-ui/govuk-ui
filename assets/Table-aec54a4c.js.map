{"version":3,"file":"Table-aec54a4c.js","sources":["../../src/components/TableCell/TableCell.tsx","../../src/components/TableHeader/TableHeader.tsx","../../src/components/TableRow/TableRow.tsx","../../src/components/Table/Table.tsx"],"sourcesContent":["import React from \"react\";\nimport TableCellProps from \"./TableCell.types\";\n\nexport const TableCell = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableCellProps) => {\n  \n  return (\n    <>\n      <td className={`govuk-table__cell ${classes || ''}`} id={id} { ...attributes }>\n        { children }\n      </td>\n    </>\n  );\n};\n\nexport default TableCell;\n\n\n\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableHeaderProps from \"./TableHeader.types\";\nimport TableCell from \"../TableCell\";\n\nexport const TableHeader = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableHeaderProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <thead className={`govuk-table__head ${classes || ''}`} id={id} { ...attributes }>\n        <tr className=\"govuk-table__row\">\n          { Children.map(arrayChildren, (child:any, _index) => {\n            if (isValidElement(child) && (child.type === TableCell)) {\n              return (\n                  <>\n                    {\n                      cloneElement(child as React.ReactElement<any>, {})\n                    }\n                  </>\n              );\n            }\n          })}\n        </tr>\n      </thead>\n    </>\n  );\n};\n\nexport default TableHeader;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableRowProps from \"./TableRow.types\";\nimport TableCell from \"../TableCell/TableCell\";\n\nexport const TableRow = ({\n  id,\n  children,\n  caption ,\n  classes,\n  attributes,\n }: TableRowProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <tr className={`govuk-table__row ${classes || ''}`} id={id} { ...attributes }>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === TableCell)) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {})\n                }\n              </>\n            );\n          }\n        })}\n      </tr>\n    </>\n  );\n};\n\nexport default TableRow;","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableProps from \"./Table.types\";\nimport TableHeader from \"../TableHeader/TableHeader\";\nimport TableRow from \"../TableRow/TableRow\";\n\nexport const Table = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <table className={`govuk-table ${classes || ''}`} id={id} { ...attributes }>\n        <thead className=\"govuk-table__head\">\n          <tr className=\"govuk-table__row\">\n            { Children.map(arrayChildren, (child:any, _index) => {\n              if (isValidElement(child) && (child.type === TableHeader)) {\n                return (\n                    <>\n                      {\n                        cloneElement(child as React.ReactElement<any>, {})\n                      }\n                    </>\n                );\n              }\n            })}\n          </tr>\n        </thead>\n        <tbody className=\"govuk-table__body\">\n          { Children.map(arrayChildren, (child:any, _index) => {\n            if (isValidElement(child) && (child.type === TableRow)) {\n              return (\n                  <>\n                    {\n                      cloneElement(child as React.ReactElement<any>, {})\n                    }\n                  </>\n              );\n            }\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Table;\n"],"names":["TableCell","id","children","classes","attributes","jsx","Fragment","TableHeader","arrayChildren","Children","child","_index","isValidElement","cloneElement","TableRow","caption","Table","jsxs"],"mappings":"+FAGO,MAAAA,EAAA,CAAA,CAAmB,GAAAC,EACxB,SAAAC,EACA,QAAAC,EACA,WAAAC,CAED,IAECC,EAAAC,EAAA,CAAA,SAAAD,EAAA,KAAA,CAAA,UAAA,qBAAAF,GAAA,KAAA,GAAAF,EAAA,GAAAG,EAAA,SAAAF,CAAA,CAAA,CAAA,CAAA,iXCNK,MAAAK,EAAA,CAAA,CAAqB,GAAAN,EAC1B,SAAAC,EACA,QAAAC,EACA,WAAAC,CAED,IAAA,CAEC,MAAAI,EAAAC,EAAAA,SAAA,QAAAP,CAAA,EAEA,OAAAG,EAAAC,EAAA,CAAA,SAAAD,EAAA,QAAA,CAAA,UAAA,qBAAAF,GAAA,KAAA,GAAAF,EAAA,GAAAG,EAAA,SAAAC,EAAA,KAAA,CAAA,UAAA,mBAAA,SAAAI,EAAAA,SAAA,IAAAD,EAAA,CAAAE,EAAAC,IAAA,CAKU,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAV,EACE,OAAAK,EAAAC,EAAA,CAAA,SAAAO,EAAA,aAAAH,EAAA,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAMZ,qXC5BO,MAAAI,EAAA,CAAA,CAAkB,GAAAb,EACvB,SAAAC,EACA,QAAAa,EACA,QAAAZ,EACA,WAAAC,CAED,IAAA,CAEC,MAAAI,EAAAC,EAAAA,SAAA,QAAAP,CAAA,EAEA,OAAAG,EAAAC,EAAA,CAAA,SAAAD,EAAA,KAAA,CAAA,UAAA,oBAAAF,GAAA,KAAA,GAAAF,EAAA,GAAAG,EAAA,SAAAK,WAAA,IAAAD,EAAA,CAAAE,EAAAC,IAAA,CAIQ,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAV,EACE,OAAAK,EAAAC,EAAA,CAAA,SAAAO,EAAA,aAAAH,EAAA,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,CAAA,CAAA,CAAA,CAAA,CAKV,0cC1BO,MAAAM,EAAA,CAAA,CAAe,GAAAf,EACpB,SAAAC,EACA,QAAAC,EACA,WAAAC,CAED,IAAA,CAEC,MAAAI,EAAAC,EAAAA,SAAA,QAAAP,CAAA,EAEA,OAAAG,EAAAC,EAAA,CAAA,SAAAW,EAAA,QAAA,CAAA,UAAA,eAAAd,GAAA,KAAA,GAAAF,EAAA,GAAAG,EAAA,SAAA,CAGMC,EAAA,QAAA,CAAA,UAAA,oBAAA,SAAAA,EAAA,KAAA,CAAA,UAAA,mBAAA,SAAAI,WAAA,IAAAD,EAAA,CAAAE,EAAAC,IAAA,CAGM,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAH,EACE,OAAAF,EAAAC,EAAA,CAAA,SAAAO,EAAA,aAAAH,EAAA,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,CAAA,CAAA,CAAA,CAAA,EAGNL,EAAA,QAAA,CAAA,UAAA,oBAAA,SAAAI,EAAA,SAAA,IAAAD,EAAA,CAAAE,EAAAC,IAAA,CAGI,GAAAC,EAAA,eAAAF,CAAA,GAAAA,EAAA,OAAAI,EACE,OAAAT,EAAAC,EAAA,CAAA,SAAAO,EAAA,aAAAH,EAAA,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EAAA,CAEJ,CAAA,CAAA,CAAA,CAAA,CAIR"}