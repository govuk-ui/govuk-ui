{"version":3,"file":"Radios-946d7ae8.js","sources":["../../src/components/RadioItem/RadioItem.tsx","../../src/components/Radios/Radios.tsx"],"sourcesContent":["import React, { Children, cloneElement, isValidElement } from \"react\";\nimport Label from '../Label';\nimport Hint from '../Hint';\nimport RadioItemProps from \"./RadioItem.types\";\n\nexport const RadioItem = ({\n  id,\n  name,\n  children,\n  key,\n  divider,\n  value,\n  data,\n  conditional,\n  classes,\n  ...attributes }: RadioItemProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  const conditionalId = `conditional-${id}`\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <div className={ !divider ? 'govuk-radios__item' : 'govuk-radios__divider' }>\n      { !divider && (\n        <>\n          <input\n            className={`govuk-radios__input ${classes || ''}`}\n            id={id}\n            name={name}\n            key={key}\n            type=\"radio\"\n            value={value}\n            defaultChecked={data === value}\n            data-aria-controls={ conditional ? conditionalId : '' }\n            { ...attributes }\n          />\n          { Children.map(arrayChildren, (child:any, index) => {\n            if (isValidElement(child) && child.type === Label) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-radios__label',\n                      htmlFor: id\n                    })\n                  }\n                </>\n              );\n            } else if (isValidElement(child) && child.type === Hint) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-radios__hint'\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n          { conditional && (\n            <div className={`govuk-radios__conditional ${data !== value ? 'govuk-radios__conditional--hidden' : ''}`} id={conditionalId}>\n              { conditional }\n            </div>\n          )}\n        </>\n      )}\n      { divider && (\n        <>\n          { children }\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RadioItem;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport RadiosProps from \"./Radios.types\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport Fieldset from \"../../layout/Fieldset\";\nimport Hint from \"../Hint\";\nimport Legend from \"../../layout/Legend\";\nimport RadioItem from \"../RadioItem\";\n\nexport const Radios = ({\n  idPrefix,\n  name,\n  children,\n  classes,\n  value,\n  errorMessage,\n  ...attributes\n}: RadiosProps) => {\n\n  if (!idPrefix && name) {\n    idPrefix = name;\n  } else if (!name && idPrefix) {\n    name = idPrefix;\n  }\n\n  let describedByValue = '';\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = idPrefix ? `${idPrefix}-error` : '';\n    describedByValue += ` ${errorId}`;\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n  const radioItemsArray: any = arrayChildren.filter((child: any) => child.type === RadioItem);\n\n  { Children.map(arrayChildren, (child:any, _index) => {\n    if (isValidElement(child) && (child.type === Hint)) {\n      describedByValue += ` ${idPrefix}-hint`;\n    }\n  })}\n\n  return (\n    <FormGroup error={errorMessage}>\n      <Fieldset describedBy={describedByValue}>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Legend)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === Hint)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        { errorMessageComponent }\n        <div className={`govuk-radios ${classes || ''}`} data-module=\"govuk-radios\" { ...attributes }>\n          { Children.map(radioItemsArray, (child: any, index) => {\n            if (isValidElement(child) && (child.type === RadioItem)) {\n              const radioItemId = child?.props?.id ? child?.props?.id : idPrefix;\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {\n                      id: index > 0 ? `${radioItemId}-${index}` : radioItemId,\n                      data: value,\n                      name: name\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n        </div>\n      </Fieldset>\n    </FormGroup>\n  );\n};\n\nexport default Radios;\n"],"names":["RadioItem","id","name","children","key","divider","value","data","conditional","classes","attributes","conditionalId","arrayChildren","Children","jsxs","Fragment","jsx","child","index","isValidElement","Label","cloneElement","Hint","Radios","idPrefix","errorMessage","describedByValue","errorMessageComponent","errorId","ErrorMessage","radioItemsArray","_index","FormGroup","Fieldset","Legend","radioItemId","_a","_b"],"mappings":"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"}