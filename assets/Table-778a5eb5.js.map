{"version":3,"file":"Table-778a5eb5.js","sources":["../../src/components/Checkboxes/Checkboxes.tsx","../../src/components/CheckboxItem/CheckboxItem.tsx","../../src/components/SummaryListItem/SummaryListItem.tsx","../../src/components/SummaryListRow/SummaryListRow.tsx","../../src/components/SummaryList/SummaryList.tsx","../../src/components/SummaryListKey/SummaryListKey.tsx","../../src/components/SummaryListValue/SummaryListValue.tsx","../../src/components/SummaryListActions/SummaryListActions.tsx","../../src/components/TableCell/TableCell.tsx","../../src/components/TableHeader/TableHeader.tsx","../../src/components/TableRow/TableRow.tsx","../../src/components/Table/Table.tsx"],"sourcesContent":["import React, { Children, cloneElement } from \"react\";\nimport CheckboxesProps from \"./Checkboxes.types\";\nimport FormGroup from \"../../layout/FormGroup\";\nimport ErrorMessage from \"../ErrorMessage\";\n\nexport const Radios = ({\n  id,\n  name,\n  children,\n  classes,\n  errorMessage,\n  value,\n  ...attributes\n}: CheckboxesProps) => {\n\n  if (!id && name) {\n    id = name;\n  } else if (!name && id) {\n    name = id;\n  }\n\n  let errorMessageComponent;\n\n  if (errorMessage) {\n    const errorId = id ? `${id}-error` : '';\n    errorMessageComponent = <ErrorMessage id={errorId}>{errorMessage}</ErrorMessage>;\n  }\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <FormGroup error={errorMessage}>\n      { errorMessageComponent }\n      <div className={`govuk-checkboxes ${classes || ''}`} data-module=\"govuk-checkboxes\" id={id} { ...attributes }>\n        { Children.map(arrayChildren, (child) => {\n          return (\n            <>\n              {\n                cloneElement(child, {\n                  name: name,\n                  data: value,\n                })\n              }\n            </>\n          );\n        })}\n      </div>\n    </FormGroup>\n  );\n};\n\nexport default Radios;\n","import React, { Children, cloneElement, isValidElement } from \"react\";\nimport Label from '../Label';\nimport Hint from '../Hint';\nimport CheckboxItemProps from \"./CheckboxItem.types\";\n\nexport const CheckboxesItem = ({ \n  id,\n  name,\n  children,\n  key,\n  divider,\n  exclusive,\n  value,\n  data,\n  classes,\n  ...attributes }: CheckboxItemProps) => {\n\n  const arrayChildren:any = Children.toArray(children);\n\n  return (\n    <div className={ !divider ? 'govuk-checkboxes__item' : 'govuk-checkboxes__divider' }>\n      { !divider && (\n        <>\n          <input\n            className={`govuk-checkboxes__input ${classes || ''}`}\n            id={id}\n            name={name}\n            key={key}\n            type=\"checkbox\"\n            value={value}\n            defaultChecked={((Array.isArray(data) && data.includes(value)) || (data === value))}\n            data-behaviour={exclusive ? 'exclusive' : null}\n            { ...attributes }\n          />\n          { Children.map(arrayChildren, (child:any, index) => {\n            if (isValidElement(child) && child.type === Label) {\n              return (\n                <>\n                  { \n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-checkboxes__label'\n                    })\n                  }\n                </>\n              );\n            } else if (isValidElement(child) && child.type === Hint) {\n              return (\n                <>\n                  { \n                    cloneElement(child as React.ReactElement<any>, {\n                      classes: 'govuk-checkboxes__hint'\n                    })\n                  }\n                </>\n              );\n            }\n          })}\n        </>\n      )}\n      { divider && (\n        <>\n          { children }\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CheckboxesItem;\n","import React, { Children, cloneElement, isValidElement } from \"react\";\nimport { SummaryListActions, SummaryListKey, SummaryListValue } from \"..\";\nimport SummaryListItemProps from \"./SummaryListItem.types\";\n\nexport const SummaryListItem = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListItemProps) => {\n\nconst arrayChildren: any = Children.toArray(children);\n\n  return (\n    <div className={`govuk-summary-list__row ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      { Children.map(arrayChildren, (child:any, index) => {\n        if (isValidElement(child) && (\n          child.type === SummaryListKey ||\n          child.type === SummaryListValue ||\n          child.type === SummaryListActions)\n        ) {\n          return (\n            <>\n              { \n                cloneElement(child as React.ReactElement<any>, {})\n              }\n            </>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\nexport default SummaryListItem;\n","import React from \"react\";\nimport { SummaryListActions, SummaryListItem, SummaryListKey, SummaryListValue } from \"..\";\nimport SummaryListRowProps from \"./SummaryListRow.types\";\n\nexport const SummaryListRow = ({ \n  id,\n  classes,\n  children,\n  field,\n  data,\n  rowKey,\n  href,\n  ...attributes\n}: SummaryListRowProps) => {\n\n  if (!field || ! data) {\n    return null;\n  }\n\n  if (!Object.keys(data).includes(field)) {\n    return null;\n  }\n\n  return (\n    <SummaryListItem classes={classes} id={id} { ...attributes }>\n      <SummaryListKey>\n        { rowKey ? rowKey : field}\n      </SummaryListKey>\n      <SummaryListValue>\n        { data[field] }\n      </SummaryListValue>\n      <SummaryListActions>\n        <a className=\"govuk-link\" href={href}>\n          Change <span className=\"govuk-visually-hidden\">\n            { field.toLowerCase() }\n          </span>\n        </a>\n      </SummaryListActions>\n    </SummaryListItem>\n  );\n};\n\nexport default SummaryListRow;\n\n","import React, { Children, cloneElement, isValidElement } from \"react\";\nimport SummaryListItem from \"../SummaryListItem\";\nimport SummaryListRow from \"../SummaryListRow\";\nimport SummaryListProps from \"./SummaryList.types\";\n\nexport const SummaryList = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListProps) => {\n\n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <dl \n      className={`govuk-summary-list ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      { Children.map(arrayChildren, (child:any, index) => {\n        if (isValidElement(child) && (child.type === SummaryListItem || child.type === SummaryListRow)) {\n          return (\n            <>\n              { \n                cloneElement(child as React.ReactElement<any>, {})\n              }\n            </>\n          );\n        }\n      })}\n    </dl>\n  );\n};\n\nexport default SummaryList;\n","import React from \"react\";\nimport SummaryListKeyProps from \"./SummaryListKey.types\";\n\nexport const SummaryListKey = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListKeyProps) => {\n  return (\n    <dt className={`govuk-summary-list__key ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      {children}\n    </dt>\n  );\n};\n\nexport default SummaryListKey;\n","import React from \"react\";\nimport SummaryListValueProps from \"./SummaryListValue.types\";\n\nexport const SummaryListValue = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListValueProps) => {\n  return (\n    <dt className={`govuk-summary-list__value ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      {children}\n    </dt>\n  );\n};\n\nexport default SummaryListValue;\n\n","import React from \"react\";\nimport SummaryListActionsProps from \"./SummaryListActions.types\";\n\nexport const SummaryListActions = ({ \n  id,\n  classes,\n  children,\n  ...attributes\n}: SummaryListActionsProps) => {\n  return (\n    <dt className={`govuk-summary-list__actions ${classes || ''}`}\n      id={id}\n      { ...attributes }\n    >\n      {children}\n    </dt>\n  );\n};\n\nexport default SummaryListActions;\n","import React from \"react\";\nimport TableCellProps from \"./TableCell.types\";\n\nexport const TableCell = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableCellProps) => {\n  \n  return (\n    <>\n      <td className={`govuk-table__cell ${classes || ''}`} id={id} { ...attributes }>\n        { children }\n      </td>\n    </>\n  );\n};\n\nexport default TableCell;\n\n\n\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableHeaderProps from \"./TableHeader.types\";\nimport TableCell from \"../TableCell\";\n\nexport const TableHeader = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableHeaderProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <thead className={`govuk-table__head ${classes || ''}`} id={id} { ...attributes }>\n        <tr className=\"govuk-table__row\">\n          { Children.map(arrayChildren, (child:any, _index) => {\n            if (isValidElement(child) && (child.type === TableCell)) {\n              return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n              );\n            }\n          })}\n        </tr>\n      </thead>\n    </>\n  );\n};\n\nexport default TableHeader;\n","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableRowProps from \"./TableRow.types\";\nimport TableCell from \"../TableCell/TableCell\";\n\nexport const TableRow = ({\n  id,\n  children,\n  caption ,\n  classes,\n  attributes,\n }: TableRowProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <tr className={`govuk-table__row ${classes || ''}`} id={id} { ...attributes }>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === TableCell)) {\n            return (\n              <>\n                {\n                  cloneElement(child as React.ReactElement<any>, {})\n                }\n              </>\n            );\n          }\n        })}\n      </tr>\n    </>\n  );\n};\n\nexport default TableRow;","import React, {Children, cloneElement, isValidElement} from \"react\";\nimport TableProps from \"./Table.types\";\nimport TableHeader from \"../TableHeader/TableHeader\";\nimport TableRow from \"../TableRow/TableRow\";\n\nexport const Table = ({\n  id,\n  children,\n  classes,\n  attributes,\n }: TableProps) => {\n  \n  const arrayChildren: any = Children.toArray(children);\n\n  return (\n    <>\n      <table className={`govuk-table ${classes || ''}`} id={id} { ...attributes }>\n        { Children.map(arrayChildren, (child:any, _index) => {\n          if (isValidElement(child) && (child.type === TableHeader)) {\n            return (\n                <>\n                  {\n                    cloneElement(child as React.ReactElement<any>, {})\n                  }\n                </>\n            );\n          }\n        })}\n        <tbody className=\"govuk-table__body\">\n          { Children.map(arrayChildren, (child:any, _index) => {\n            if (isValidElement(child) && (child.type === TableRow)) {\n              return (\n                  <>\n                    {\n                      cloneElement(child as React.ReactElement<any>, {})\n                    }\n                  </>\n              );\n            }\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Table;\n"],"names":["Radios","id","name","children","classes","errorMessage","value","attributes","errorMessageComponent","errorId","jsx","ErrorMessage","arrayChildren","Children","jsxs","FormGroup","child","Fragment","cloneElement","CheckboxesItem","key","divider","exclusive","data","index","isValidElement","Label","Hint","SummaryListItem","SummaryListKey","SummaryListValue","SummaryListActions","SummaryListRow","field","rowKey","href","SummaryList","TableCell","TableHeader","_index","TableRow","caption","Table"],"mappings":"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"}